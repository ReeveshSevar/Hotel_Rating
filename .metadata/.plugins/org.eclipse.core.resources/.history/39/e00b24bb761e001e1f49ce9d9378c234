package com.user.service.UserService.Impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.user.service.UserService.entity.Hotel;
import com.user.service.UserService.entity.Rating;
import com.user.service.UserService.entity.User;
import com.user.service.UserService.exception.ResourceNotFound;
import com.user.service.UserService.repository.UserRepository;
import com.user.service.UserService.service.UserService;

@Service
public class UserServiceImpl implements UserService 
{	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private RestTemplate restTemplate;
	
	private Logger logger = LoggerFactory.getLogger(UserService.class);

	@Override
	public User saveUser(User user) {
		Integer randomUserId = UUID.randomUUID().hashCode();
		user.setUserId(randomUserId);
		return userRepository.save(user);
	}

	@Override
	public List<User> getAllUser() {
		return userRepository.findAll();
	}

	@Override
	public User getUser(Integer id) {
		Optional<User> opt = userRepository.findById(id);
		if(opt.isPresent())
		{
			User user = opt.get();
			
			Rating[] ratingOfUser  =  restTemplate.getForObject("http://localhost:1113/ratings/users/"+user.getUserId(), Rating[].class);
			logger.info("{} ",ratingOfUser);
			
			List<Rating> ratings = Arrays.stream(ratingOfUser).toList();
			
			List<Rating> ratingList =  ratings.stream().map(rating ->{
				ResponseEntity<Hotel> forEntity = restTemplate.getForEntity("http://localhost:1112/hotels/"+rating.getHotelId(), Hotel.class);
				Hotel hotel = forEntity.getBody();
				logger.info("response status code : {}",forEntity.getStatusCode());
				rating.setHotel(hotel);
				
				return rating;
			}).collect(Collectors.toList());

			user.setRatings(ratingList);
			return user;
		}
		else
			throw new ResourceNotFound("User With Given Id Is Not Found On Server !! "+id);
	}

	@Override
	public User deleteUser(Integer id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public User updateUser(User user) {
		// TODO Auto-generated method stub
		return null;
	}
}
