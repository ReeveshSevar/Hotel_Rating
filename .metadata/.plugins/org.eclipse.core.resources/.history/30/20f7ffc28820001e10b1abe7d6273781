package com.user.service.UserService.controller;

import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
 import com.user.service.UserService.entity.User;
import com.user.service.UserService.service.UserService;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.retry.annotation.Retry;

@RestController
@RequestMapping("/users")
public class UserController {
	
	@Autowired
	private UserService userService;
	
	private Logger logger = LoggerFactory.getLogger(User.class);
	
	@PostMapping
	public ResponseEntity<User> create(@RequestBody User user)
	{
		User user1 = userService.saveUser(user);
		return ResponseEntity.status(HttpStatus.CREATED).body(user1); 
	}
	
	
	int retryCount = 1;
	@GetMapping("/{id}")
//	@CircuitBreaker(name="ratingHotelBreaker",fallbackMethod = "ratingHotelFallback")
	@Retry(name="ratingHotelService",fallbackMethod = "ratingHotelFallback")
	public ResponseEntity<User> getSingleUser(@PathVariable Integer id)
	{	
		logger.info("Retry Count: "+retryCount);
		retryCount++;
		User user = userService.getUser(id);
		return ResponseEntity.ok(user);
	}
	
	// Creating Method For Fallback
	public ResponseEntity<User> ratingHotelFallback(Integer id, Exception e)
	{
		logger.info("Fallback Method Executed Because Main Service Is Down",e.getMessage());
		User user = User.builder().userId(12345).email("dummy@gmail.com").name("Dummy").about("Dummy User Is Created Because Some Services Are Down").build();
		return new ResponseEntity<User>(user,HttpStatus.OK);
	}
	
	
	
	@GetMapping
	public ResponseEntity<List<User>> getAllUsers()
	{
		List<User> allUser = userService.getAllUser();
		return ResponseEntity.ok(allUser);
	}
}
